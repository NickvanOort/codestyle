Motivation
==========

While it is often appreciated that Python gives programmers a lot of freedom regarding 
coding style, this can become problematic when writing code that is intended to 
be maintainable and readable in production.

Your code runs for now, but will it keep running reliably under all circumstances?
And if bugs pop up, is it easy for another programmer who has never seen your
code, to debug it? Is it easy to extend your code with new functionality?
Would it be easy for yourself to do these things, after 6 months?

We want to give a confident "yes" to all these questions. That's why we propose coding 
standards that promote best practices for readability and consistency.

- Some things (like :doc:`typehinting`) are optional in Python. Even though your code will run fine without it, it makes the code much more **readable** for others. In addition to that, you can use linters that will check your code for **consistency**. This is especially helpful if a code repository gets big, with lots of interacting functions, and multiple persons working on it over and extended period of time.

- Other things (like :doc:`paths <libraries>`) can be done in multiple ways: you could achieve similar results with ``os.path`` and ``pathlib.Path``. However, a decent case can be made that ``pathlib`` is clearer, easier to read and thus better. Sharing and adopting **best practices** helps to get better code. Why would everyone need to invent the wheel on their own, right?

- Finally, some things are just a matter of taste. For example, there are multiple libraries for loggers. Often, the standard ``logging`` works just fine. Using ``loguru.logger`` :doc:`(see here) <libraries>` instead might be considered just a matter of taste, even though there might be slightly better defaults. But sticking to a standard here makes code more consistent and thus better maintainable. It might not matter that much which one you use, as long as we make a **consistent** choice.

In general, there will always be expections to the rule. The rule of thumb would: `we follow the coding standards, unless there is a good reason not to`. E.g. there are reasons why ``poetry`` is a better environment manager than ``conda``, but some could environments dont work will (yet) with ``poetry``, so in that case falling back to ``conda`` could be a good idea.
